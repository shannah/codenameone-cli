package com.codename1.templatebrowser;


import com.codename1.cli.CodenameOneCLI;
import com.codename1.components.InteractionDialog;
import com.codename1.components.SpanLabel;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.JSONParser;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Button;
import com.codename1.ui.ComboBox;
import com.codename1.ui.Component;
import com.codename1.ui.Container;
import com.codename1.ui.EncodedImage;
import com.codename1.ui.Font;
import com.codename1.ui.FontImage;
import com.codename1.ui.Image;
import com.codename1.ui.TextField;
import com.codename1.ui.Toolbar;
import com.codename1.ui.URLImage;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.plaf.Border;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.table.TableLayout;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.io.FileUtils;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class TemplateBrowser {
    private static final String templatesUrl = "https://raw.githubusercontent.com/shannah/codenameone-templates/master/templates.json";
    private Form current;
    private Resources theme;
    private EncodedImage placeholder;
    
    private TemplateBrowserConnector connector;
    
    public interface TemplateBrowserConnector {
        public void submitForm(Project project);
        public void cancel();
        public void initProject(Project project);
        public void runDemo(Template tpl);
    }

    
    public void setConnector(TemplateBrowserConnector connector) {
        this.connector = connector;
    }
    
    public TemplateBrowserConnector getConnector() {
        return connector;
    }
    
    
    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature, uncomment if you have a pro subscription
        // Log.bindCrashProtection(true);
        placeholder = EncodedImage.createFromImage(EncodedImage.createImage(320, 480), false);
    }
    
    private void submitForm(Project project) {
        if (connector != null) connector.submitForm(project);
    }
    
    private void cancel() {
        if (connector != null) connector.cancel();
    }
    
    private void initProject(Project project) {
        if (connector != null) connector.initProject(project);
    }
    
    private void runDemo(Template tpl) {
        if (connector != null) connector.runDemo(tpl);
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
        Form f = new Form(new BorderLayout());
        f.setTitle("Create Codename One Project");
        Project project = new Project();
        initProject(project);
        f.addComponent(BorderLayout.CENTER, createTemplateBrowserForm(project));
        f.addPointerPressedListener(e->{
            if (currentDetails != null && !currentDetails.contains(e.getX(), e.getY())) {
                
                currentDetails.dispose();
                currentDetails = null;
            }
        });
        f.show();
    }

    public void stop() {
        current = Display.getInstance().getCurrent();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = Display.getInstance().getCurrent();
        }
    }
    
    public void destroy() {
    }
    
    public class Project {
        public String ide;
        public String templateUrl;
        public String destPath;
        public String mainClass;
    }
    
    public class Template {
        public String url;
        public String imageUrl;
        public String name;
        public String description;
        public String demoUrl;
        
        public Image getImage() {
            return URLImage.createToStorage(
                placeholder, 
                imageUrl+"@"+placeholder.getWidth()+"x"+placeholder.getHeight(), 
                imageUrl, 
                URLImage.RESIZE_SCALE_TO_FILL
            );
        }
        
    }
    
    private Container createTemplateBrowserForm(final Project project) {
        
        Container root = new Container(new BorderLayout());
        
        
        TextField templateUrl = new TextField(project.templateUrl);
        templateUrl.setColumns(60);
        templateUrl.addActionListener(e->project.templateUrl = templateUrl.getText());
        
        TextField destPath = new TextField(project.destPath);
        destPath.setColumns(60);
        destPath.addActionListener(e->project.destPath = destPath.getText());
        
        TextField mainClass = new TextField(project.mainClass);
        mainClass.addActionListener(e->project.mainClass = mainClass.getText());
        mainClass.setColumns(60);
        
        ComboBox<String> ide = new ComboBox<String>("Netbeans", "Eclipse", "IntelliJ");
        if (project.ide != null) ide.setSelectedItem(project.ide);
        ide.addActionListener(e->project.ide = ide.getSelectedItem());
        
        TextField templateSearch = new TextField();
        
        
        TableLayout table = new TableLayout(4, 2);
        Container north = new Container(table);
        north.add("Project Folder").add(destPath)
                .add("Main Class").add(mainClass)
                .add("Project Type").add(ide)
                .add("Template").add(new Label())
                ;
                
        
        root.add(BorderLayout.NORTH, north);
        
        Container center = new Container(new BoxLayout(BoxLayout.Y_AXIS));
        center.setScrollableY(true);
        root.add(BorderLayout.CENTER, center);
        
        TableLayout southTable = new TableLayout(2, 2);
        Container south = new Container(southTable);
        
        south.add("Template URL").add(templateUrl);
        
        Button cancel = new Button("Cancel");
        cancel.addActionListener(e->{
            //Cancelling
            cancel();
            
        });
        
        
        Button createProject = new Button("Create Project");
        createProject.addActionListener(e->{
            // Create project
            submitForm(project);
        });
        
        
        south.add(new Label()).add(FlowLayout.encloseCenter(cancel, createProject));
        
        root.addComponent(BorderLayout.SOUTH, south);
        
        Display.getInstance().callSerially(()->{
            center.removeAll();
            center.add(createTemplateBrowser(project, getTemplates(), templateUrl));
            center.getParent().revalidate();
        });
        return root;
        
    }
    
    private Container createTemplateBrowser(Project project, Template[] templates, TextField templateUrl) {
        Container root = new Container(new GridLayout(templates.length/3+1, 3));
        
        for (Template template : templates) {
            root.addComponent(createTemplateButton(project, template, templateUrl));
        }
        
        return root;
        
        
    }
    
    private Container createTemplateDetailsPanel(Project project, Template template, TextField templateUrl) {
        Container root = new Container(new BorderLayout());
        Label l = new Label(template.getImage());
        
        root.add(BorderLayout.WEST, l);
        
        Container center = new Container(new BoxLayout(BoxLayout.Y_AXIS));
        center.add("Name: "+template.name)
                .add("Description")
                .add(new SpanLabel(template.description));
        
        Button useThis = new Button("Use This Template");
        useThis.addActionListener(e->{
            templateUrl.setText(template.url);
            project.templateUrl = template.url;
            if (currentDetails != null) {
                currentDetails.dispose();
                currentDetails = null;
            }
        });
        
        Button runDemo = null;
        if (template.demoUrl != null) {
            runDemo = new Button("Run Demo");
            runDemo.addActionListener(e->{
                runDemo(template);

            });
        }
        
        center.add(FlowLayout.encloseCenter(useThis, runDemo != null ? runDemo : new Label()));
        
        root.add(BorderLayout.CENTER, center);
        return root;
    }
    
    
    private interface Styler {
        void apply(Component c);
    }
    
    private void applyStyleRecursive(Component root, Styler s) {
        s.apply(root);
        if (root instanceof Container) {
            for (Component child : ((Container)root)) {
                applyStyleRecursive(child, s);
            }
        }
        
    }
    
    InteractionDialog currentDetails;
    
    private Container createTemplateButton(Project project, Template template, TextField templateUrl) {
        Container root = new Container(new BorderLayout());
        
        Button b = new Button(template.getImage());
        
        b.addActionListener(e->{
            
            if (currentDetails != null) {
                return;
            }
            System.out.println("In actionListener for "+b);
            InteractionDialog dlg = new InteractionDialog(template.name);
            currentDetails = dlg;
            dlg.getAllStyles().setBorder(Border.createRoundBorder(10, 10, 0x0, true));
            dlg.getStyle().setBgColor(0x0);
            dlg.getStyle().setBgTransparency(200);
            dlg.setLayout(new BorderLayout());
            Style style = new Style();
            style.setFgColor(0xffffff);
            style.setBorder(Border.createEmpty());
            style.setBgColor(0x0);
            style.setBgTransparency(0);
            style.setFont(Font.createSystemFont(Font.FACE_SYSTEM, Font.STYLE_BOLD, Font.SIZE_LARGE));
            FontImage x = FontImage.createMaterial(FontImage.MATERIAL_CLOSE, style);
            Button closeBtn = new Button(x);
            closeBtn.getAllStyles().setBorder(Border.createEmpty());
            closeBtn.addActionListener(e2->{
                currentDetails = null;
                dlg.dispose();
            });
            dlg.getContentPane().add(BorderLayout.NORTH, FlowLayout.encloseRight(closeBtn));
            dlg.getContentPane().add(BorderLayout.CENTER, createTemplateDetailsPanel(project, template, templateUrl));
            
            applyStyleRecursive(dlg, c->{
                c.getAllStyles().setFgColor(0xffffff);
            });
            
            dlg.show(10, 10, 10, 10);
            
        });
        
        root.addComponent(BorderLayout.CENTER, b);
        return root;
    }

    private Template[] templates;
    
    private Template[] getTemplates() {
        if (templates == null) {
            templates = loadTemplates();
        }
        return templates;
    }
    
    private Template[] loadTemplates() {
        try {
            Map<String,Object> m = ConnectionRequest.fetchJSON(templatesUrl);
            System.out.println("Loaded templates "+m);
            Template[] out = new Template[m.size()];
            int index = 0;
            for (String k : m.keySet()) {
                Map curr = (Map)m.get(k);
                Template t = new Template();
                t.imageUrl = (String)curr.get("imageUrl");
                t.name = (String)curr.get("name");
                t.description = (String)curr.get("description");
                t.url = (String)curr.get("url");
                t.demoUrl = (String)curr.get("demoUrl");
                out[index++] = t;
            }
            return out;
        } catch (Exception e) {}
        return new Template[0];
    }
    
}
